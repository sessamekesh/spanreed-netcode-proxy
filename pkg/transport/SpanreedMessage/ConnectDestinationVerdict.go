// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SpanreedMessage

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConnectDestinationVerdict struct {
	_tab flatbuffers.Table
}

func GetRootAsConnectDestinationVerdict(buf []byte, offset flatbuffers.UOffsetT) *ConnectDestinationVerdict {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConnectDestinationVerdict{}
	x.Init(buf, n+offset)
	return x
}

func FinishConnectDestinationVerdictBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConnectDestinationVerdict(buf []byte, offset flatbuffers.UOffsetT) *ConnectDestinationVerdict {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConnectDestinationVerdict{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConnectDestinationVerdictBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConnectDestinationVerdict) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConnectDestinationVerdict) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConnectDestinationVerdict) ClientId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConnectDestinationVerdict) MutateClientId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ConnectDestinationVerdict) Accepted() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConnectDestinationVerdict) MutateAccepted(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *ConnectDestinationVerdict) ErrorReason() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConnectDestinationVerdict) AppData(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ConnectDestinationVerdict) AppDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConnectDestinationVerdict) AppDataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConnectDestinationVerdict) MutateAppData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func ConnectDestinationVerdictStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ConnectDestinationVerdictAddClientId(builder *flatbuffers.Builder, clientId uint32) {
	builder.PrependUint32Slot(0, clientId, 0)
}
func ConnectDestinationVerdictAddAccepted(builder *flatbuffers.Builder, accepted bool) {
	builder.PrependBoolSlot(1, accepted, false)
}
func ConnectDestinationVerdictAddErrorReason(builder *flatbuffers.Builder, errorReason flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(errorReason), 0)
}
func ConnectDestinationVerdictAddAppData(builder *flatbuffers.Builder, appData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(appData), 0)
}
func ConnectDestinationVerdictStartAppDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ConnectDestinationVerdictEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
