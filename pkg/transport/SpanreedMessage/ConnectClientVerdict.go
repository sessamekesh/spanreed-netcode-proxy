// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SpanreedMessage

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConnectClientVerdict struct {
	_tab flatbuffers.Table
}

func GetRootAsConnectClientVerdict(buf []byte, offset flatbuffers.UOffsetT) *ConnectClientVerdict {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConnectClientVerdict{}
	x.Init(buf, n+offset)
	return x
}

func FinishConnectClientVerdictBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConnectClientVerdict(buf []byte, offset flatbuffers.UOffsetT) *ConnectClientVerdict {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConnectClientVerdict{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConnectClientVerdictBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConnectClientVerdict) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConnectClientVerdict) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConnectClientVerdict) Accepted() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConnectClientVerdict) MutateAccepted(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *ConnectClientVerdict) ErrorReason() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConnectClientVerdict) AppData(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ConnectClientVerdict) AppDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConnectClientVerdict) AppDataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConnectClientVerdict) MutateAppData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func ConnectClientVerdictStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ConnectClientVerdictAddAccepted(builder *flatbuffers.Builder, accepted bool) {
	builder.PrependBoolSlot(0, accepted, false)
}
func ConnectClientVerdictAddErrorReason(builder *flatbuffers.Builder, errorReason flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(errorReason), 0)
}
func ConnectClientVerdictAddAppData(builder *flatbuffers.Builder, appData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(appData), 0)
}
func ConnectClientVerdictStartAppDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ConnectClientVerdictEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
