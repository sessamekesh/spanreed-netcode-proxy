// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SpanreedMessage

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ProxyDestinationMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsProxyDestinationMessage(buf []byte, offset flatbuffers.UOffsetT) *ProxyDestinationMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ProxyDestinationMessage{}
	x.Init(buf, n+offset)
	return x
}

func FinishProxyDestinationMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsProxyDestinationMessage(buf []byte, offset flatbuffers.UOffsetT) *ProxyDestinationMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ProxyDestinationMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedProxyDestinationMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ProxyDestinationMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProxyDestinationMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ProxyDestinationMessage) InnerMessageType() ProxyDestInnerMsg {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ProxyDestInnerMsg(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ProxyDestinationMessage) MutateInnerMessageType(n ProxyDestInnerMsg) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *ProxyDestinationMessage) InnerMessage(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *ProxyDestinationMessage) AppData(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ProxyDestinationMessage) AppDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ProxyDestinationMessage) AppDataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ProxyDestinationMessage) MutateAppData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func ProxyDestinationMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ProxyDestinationMessageAddInnerMessageType(builder *flatbuffers.Builder, innerMessageType ProxyDestInnerMsg) {
	builder.PrependByteSlot(0, byte(innerMessageType), 0)
}
func ProxyDestinationMessageAddInnerMessage(builder *flatbuffers.Builder, innerMessage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(innerMessage), 0)
}
func ProxyDestinationMessageAddAppData(builder *flatbuffers.Builder, appData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(appData), 0)
}
func ProxyDestinationMessageStartAppDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ProxyDestinationMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
