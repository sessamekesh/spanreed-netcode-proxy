// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVERMESSAGE_HELLOSPANREED_H_
#define FLATBUFFERS_GENERATED_SERVERMESSAGE_HELLOSPANREED_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace HelloSpanreed {

struct Dot;

struct ServerChatMessage;
struct ServerChatMessageBuilder;

struct ServerGameStateMessage;
struct ServerGameStateMessageBuilder;

struct ServerMessage;
struct ServerMessageBuilder;

enum Color : int8_t {
  Color_Red = 0,
  Color_Green = 1,
  Color_Blue = 2,
  Color_Indigo = 3,
  Color_FireOrange = 4,
  Color_MIN = Color_Red,
  Color_MAX = Color_FireOrange
};

inline const Color (&EnumValuesColor())[5] {
  static const Color values[] = {
    Color_Red,
    Color_Green,
    Color_Blue,
    Color_Indigo,
    Color_FireOrange
  };
  return values;
}

inline const char * const *EnumNamesColor() {
  static const char * const names[6] = {
    "Red",
    "Green",
    "Blue",
    "Indigo",
    "FireOrange",
    nullptr
  };
  return names;
}

inline const char *EnumNameColor(Color e) {
  if (::flatbuffers::IsOutRange(e, Color_Red, Color_FireOrange)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesColor()[index];
}

enum Message : uint8_t {
  Message_NONE = 0,
  Message_ServerChatMessage = 1,
  Message_ServerGameStateMessage = 2,
  Message_MIN = Message_NONE,
  Message_MAX = Message_ServerGameStateMessage
};

inline const Message (&EnumValuesMessage())[3] {
  static const Message values[] = {
    Message_NONE,
    Message_ServerChatMessage,
    Message_ServerGameStateMessage
  };
  return values;
}

inline const char * const *EnumNamesMessage() {
  static const char * const names[4] = {
    "NONE",
    "ServerChatMessage",
    "ServerGameStateMessage",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessage(Message e) {
  if (::flatbuffers::IsOutRange(e, Message_NONE, Message_ServerGameStateMessage)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessage()[index];
}

template<typename T> struct MessageTraits {
  static const Message enum_value = Message_NONE;
};

template<> struct MessageTraits<HelloSpanreed::ServerChatMessage> {
  static const Message enum_value = Message_ServerChatMessage;
};

template<> struct MessageTraits<HelloSpanreed::ServerGameStateMessage> {
  static const Message enum_value = Message_ServerGameStateMessage;
};

bool VerifyMessage(::flatbuffers::Verifier &verifier, const void *obj, Message type);
bool VerifyMessageVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Dot FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float radius_;
  int8_t color_;
  int8_t padding0__;  int16_t padding1__;

 public:
  Dot()
      : x_(0),
        y_(0),
        radius_(0),
        color_(0),
        padding0__(0),
        padding1__(0) {
    (void)padding0__;
    (void)padding1__;
  }
  Dot(float _x, float _y, float _radius, HelloSpanreed::Color _color)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        radius_(::flatbuffers::EndianScalar(_radius)),
        color_(::flatbuffers::EndianScalar(static_cast<int8_t>(_color))),
        padding0__(0),
        padding1__(0) {
    (void)padding0__;
    (void)padding1__;
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float radius() const {
    return ::flatbuffers::EndianScalar(radius_);
  }
  HelloSpanreed::Color color() const {
    return static_cast<HelloSpanreed::Color>(::flatbuffers::EndianScalar(color_));
  }
};
FLATBUFFERS_STRUCT_END(Dot, 16);

struct ServerChatMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ServerChatMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER = 4,
    VT_TEXT = 6
  };
  const ::flatbuffers::String *user() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER);
  }
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER) &&
           verifier.VerifyString(user()) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct ServerChatMessageBuilder {
  typedef ServerChatMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user(::flatbuffers::Offset<::flatbuffers::String> user) {
    fbb_.AddOffset(ServerChatMessage::VT_USER, user);
  }
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(ServerChatMessage::VT_TEXT, text);
  }
  explicit ServerChatMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ServerChatMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ServerChatMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ServerChatMessage> CreateServerChatMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user = 0,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0) {
  ServerChatMessageBuilder builder_(_fbb);
  builder_.add_text(text);
  builder_.add_user(user);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ServerChatMessage> CreateServerChatMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user = nullptr,
    const char *text = nullptr) {
  auto user__ = user ? _fbb.CreateString(user) : 0;
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return HelloSpanreed::CreateServerChatMessage(
      _fbb,
      user__,
      text__);
}

struct ServerGameStateMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ServerGameStateMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DOTS = 4
  };
  const ::flatbuffers::Vector<const HelloSpanreed::Dot *> *dots() const {
    return GetPointer<const ::flatbuffers::Vector<const HelloSpanreed::Dot *> *>(VT_DOTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DOTS) &&
           verifier.VerifyVector(dots()) &&
           verifier.EndTable();
  }
};

struct ServerGameStateMessageBuilder {
  typedef ServerGameStateMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_dots(::flatbuffers::Offset<::flatbuffers::Vector<const HelloSpanreed::Dot *>> dots) {
    fbb_.AddOffset(ServerGameStateMessage::VT_DOTS, dots);
  }
  explicit ServerGameStateMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ServerGameStateMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ServerGameStateMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ServerGameStateMessage> CreateServerGameStateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const HelloSpanreed::Dot *>> dots = 0) {
  ServerGameStateMessageBuilder builder_(_fbb);
  builder_.add_dots(dots);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ServerGameStateMessage> CreateServerGameStateMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<HelloSpanreed::Dot> *dots = nullptr) {
  auto dots__ = dots ? _fbb.CreateVectorOfStructs<HelloSpanreed::Dot>(*dots) : 0;
  return HelloSpanreed::CreateServerGameStateMessage(
      _fbb,
      dots__);
}

struct ServerMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ServerMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_MESSAGE = 6
  };
  HelloSpanreed::Message message_type() const {
    return static_cast<HelloSpanreed::Message>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const HelloSpanreed::ServerChatMessage *message_as_ServerChatMessage() const {
    return message_type() == HelloSpanreed::Message_ServerChatMessage ? static_cast<const HelloSpanreed::ServerChatMessage *>(message()) : nullptr;
  }
  const HelloSpanreed::ServerGameStateMessage *message_as_ServerGameStateMessage() const {
    return message_type() == HelloSpanreed::Message_ServerGameStateMessage ? static_cast<const HelloSpanreed::ServerGameStateMessage *>(message()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyMessage(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
};

template<> inline const HelloSpanreed::ServerChatMessage *ServerMessage::message_as<HelloSpanreed::ServerChatMessage>() const {
  return message_as_ServerChatMessage();
}

template<> inline const HelloSpanreed::ServerGameStateMessage *ServerMessage::message_as<HelloSpanreed::ServerGameStateMessage>() const {
  return message_as_ServerGameStateMessage();
}

struct ServerMessageBuilder {
  typedef ServerMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message_type(HelloSpanreed::Message message_type) {
    fbb_.AddElement<uint8_t>(ServerMessage::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(::flatbuffers::Offset<void> message) {
    fbb_.AddOffset(ServerMessage::VT_MESSAGE, message);
  }
  explicit ServerMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ServerMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ServerMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ServerMessage> CreateServerMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    HelloSpanreed::Message message_type = HelloSpanreed::Message_NONE,
    ::flatbuffers::Offset<void> message = 0) {
  ServerMessageBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

inline bool VerifyMessage(::flatbuffers::Verifier &verifier, const void *obj, Message type) {
  switch (type) {
    case Message_NONE: {
      return true;
    }
    case Message_ServerChatMessage: {
      auto ptr = reinterpret_cast<const HelloSpanreed::ServerChatMessage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Message_ServerGameStateMessage: {
      auto ptr = reinterpret_cast<const HelloSpanreed::ServerGameStateMessage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessage(
        verifier,  values->Get(i), types->GetEnum<Message>(i))) {
      return false;
    }
  }
  return true;
}

inline const HelloSpanreed::ServerMessage *GetServerMessage(const void *buf) {
  return ::flatbuffers::GetRoot<HelloSpanreed::ServerMessage>(buf);
}

inline const HelloSpanreed::ServerMessage *GetSizePrefixedServerMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<HelloSpanreed::ServerMessage>(buf);
}

inline bool VerifyServerMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<HelloSpanreed::ServerMessage>(nullptr);
}

inline bool VerifySizePrefixedServerMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<HelloSpanreed::ServerMessage>(nullptr);
}

inline void FinishServerMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<HelloSpanreed::ServerMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedServerMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<HelloSpanreed::ServerMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace HelloSpanreed

#endif  // FLATBUFFERS_GENERATED_SERVERMESSAGE_HELLOSPANREED_H_
