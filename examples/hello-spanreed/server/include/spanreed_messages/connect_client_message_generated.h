// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONNECTCLIENTMESSAGE_SPANREEDMESSAGE_H_
#define FLATBUFFERS_GENERATED_CONNECTCLIENTMESSAGE_SPANREEDMESSAGE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace SpanreedMessage {

struct ConnectClientMessage;
struct ConnectClientMessageBuilder;

struct ConnectClientMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConnectClientMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONNECTION_STRING = 4,
    VT_APP_DATA = 6
  };
  const ::flatbuffers::String *connection_string() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONNECTION_STRING);
  }
  const ::flatbuffers::Vector<uint8_t> *app_data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_APP_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CONNECTION_STRING) &&
           verifier.VerifyString(connection_string()) &&
           VerifyOffset(verifier, VT_APP_DATA) &&
           verifier.VerifyVector(app_data()) &&
           verifier.EndTable();
  }
};

struct ConnectClientMessageBuilder {
  typedef ConnectClientMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_connection_string(::flatbuffers::Offset<::flatbuffers::String> connection_string) {
    fbb_.AddOffset(ConnectClientMessage::VT_CONNECTION_STRING, connection_string);
  }
  void add_app_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> app_data) {
    fbb_.AddOffset(ConnectClientMessage::VT_APP_DATA, app_data);
  }
  explicit ConnectClientMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ConnectClientMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConnectClientMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ConnectClientMessage> CreateConnectClientMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> connection_string = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> app_data = 0) {
  ConnectClientMessageBuilder builder_(_fbb);
  builder_.add_app_data(app_data);
  builder_.add_connection_string(connection_string);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ConnectClientMessage> CreateConnectClientMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *connection_string = nullptr,
    const std::vector<uint8_t> *app_data = nullptr) {
  auto connection_string__ = connection_string ? _fbb.CreateString(connection_string) : 0;
  auto app_data__ = app_data ? _fbb.CreateVector<uint8_t>(*app_data) : 0;
  return SpanreedMessage::CreateConnectClientMessage(
      _fbb,
      connection_string__,
      app_data__);
}

inline const SpanreedMessage::ConnectClientMessage *GetConnectClientMessage(const void *buf) {
  return ::flatbuffers::GetRoot<SpanreedMessage::ConnectClientMessage>(buf);
}

inline const SpanreedMessage::ConnectClientMessage *GetSizePrefixedConnectClientMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SpanreedMessage::ConnectClientMessage>(buf);
}

inline bool VerifyConnectClientMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SpanreedMessage::ConnectClientMessage>(nullptr);
}

inline bool VerifySizePrefixedConnectClientMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SpanreedMessage::ConnectClientMessage>(nullptr);
}

inline void FinishConnectClientMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SpanreedMessage::ConnectClientMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedConnectClientMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SpanreedMessage::ConnectClientMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SpanreedMessage

#endif  // FLATBUFFERS_GENERATED_CONNECTCLIENTMESSAGE_SPANREEDMESSAGE_H_
