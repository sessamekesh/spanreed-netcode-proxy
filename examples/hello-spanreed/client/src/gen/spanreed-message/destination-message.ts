// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { InnerMsg, unionToInnerMsg, unionListToInnerMsg } from '../spanreed-message/inner-msg';


export class DestinationMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DestinationMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDestinationMessage(bb:flatbuffers.ByteBuffer, obj?:DestinationMessage):DestinationMessage {
  return (obj || new DestinationMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDestinationMessage(bb:flatbuffers.ByteBuffer, obj?:DestinationMessage):DestinationMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DestinationMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

msgType():InnerMsg {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : InnerMsg.NONE;
}

msg<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

appData(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

appDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

appDataArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startDestinationMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addMsgType(builder:flatbuffers.Builder, msgType:InnerMsg) {
  builder.addFieldInt8(0, msgType, InnerMsg.NONE);
}

static addMsg(builder:flatbuffers.Builder, msgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, msgOffset, 0);
}

static addAppData(builder:flatbuffers.Builder, appDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, appDataOffset, 0);
}

static createAppDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startAppDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endDestinationMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDestinationMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedDestinationMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createDestinationMessage(builder:flatbuffers.Builder, msgType:InnerMsg, msgOffset:flatbuffers.Offset, appDataOffset:flatbuffers.Offset):flatbuffers.Offset {
  DestinationMessage.startDestinationMessage(builder);
  DestinationMessage.addMsgType(builder, msgType);
  DestinationMessage.addMsg(builder, msgOffset);
  DestinationMessage.addAppData(builder, appDataOffset);
  return DestinationMessage.endDestinationMessage(builder);
}
}
