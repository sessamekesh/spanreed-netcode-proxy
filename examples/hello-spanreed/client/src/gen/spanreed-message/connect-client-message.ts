// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ConnectClientMessage {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): ConnectClientMessage {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsConnectClientMessage(bb: flatbuffers.ByteBuffer, obj?: ConnectClientMessage): ConnectClientMessage {
    return (obj || new ConnectClientMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsConnectClientMessage(bb: flatbuffers.ByteBuffer, obj?: ConnectClientMessage): ConnectClientMessage {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ConnectClientMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  connectionString(): string | null
  connectionString(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  connectionString(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  appData(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
  }

  appDataLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  appDataArray(): Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
  }

  static startConnectClientMessage(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addConnectionString(builder: flatbuffers.Builder, connectionStringOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, connectionStringOffset, 0);
  }

  static addAppData(builder: flatbuffers.Builder, appDataOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, appDataOffset, 0);
  }

  static createAppDataVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
    builder.startVector(1, data.length, 1);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt8(data[i]!);
    }
    return builder.endVector();
  }

  static startAppDataVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(1, numElems, 1);
  }

  static endConnectClientMessage(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static finishConnectClientMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset);
  }

  static finishSizePrefixedConnectClientMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset, undefined, true);
  }

  static createConnectClientMessage(builder: flatbuffers.Builder, connectionStringOffset: flatbuffers.Offset, appDataOffset: flatbuffers.Offset): flatbuffers.Offset {
    ConnectClientMessage.startConnectClientMessage(builder);
    ConnectClientMessage.addConnectionString(builder, connectionStringOffset);
    ConnectClientMessage.addAppData(builder, appDataOffset);
    return ConnectClientMessage.endConnectClientMessage(builder);
  }
}
