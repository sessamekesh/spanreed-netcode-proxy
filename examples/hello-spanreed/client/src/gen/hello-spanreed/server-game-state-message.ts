// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Dot } from '../hello-spanreed/dot';


export class ServerGameStateMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ServerGameStateMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsServerGameStateMessage(bb:flatbuffers.ByteBuffer, obj?:ServerGameStateMessage):ServerGameStateMessage {
  return (obj || new ServerGameStateMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsServerGameStateMessage(bb:flatbuffers.ByteBuffer, obj?:ServerGameStateMessage):ServerGameStateMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ServerGameStateMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dots(index: number, obj?:Dot):Dot|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Dot()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;
}

dotsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startServerGameStateMessage(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addDots(builder:flatbuffers.Builder, dotsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dotsOffset, 0);
}

static startDotsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(16, numElems, 4);
}

static endServerGameStateMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createServerGameStateMessage(builder:flatbuffers.Builder, dotsOffset:flatbuffers.Offset):flatbuffers.Offset {
  ServerGameStateMessage.startServerGameStateMessage(builder);
  ServerGameStateMessage.addDots(builder, dotsOffset);
  return ServerGameStateMessage.endServerGameStateMessage(builder);
}
}
