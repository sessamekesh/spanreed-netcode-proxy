// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ConnectionVerdict {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConnectionVerdict {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConnectionVerdict(bb:flatbuffers.ByteBuffer, obj?:ConnectionVerdict):ConnectionVerdict {
  return (obj || new ConnectionVerdict()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConnectionVerdict(bb:flatbuffers.ByteBuffer, obj?:ConnectionVerdict):ConnectionVerdict {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConnectionVerdict()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

clientId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

accepted():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startConnectionVerdict(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addClientId(builder:flatbuffers.Builder, clientId:number) {
  builder.addFieldInt32(0, clientId, 0);
}

static addAccepted(builder:flatbuffers.Builder, accepted:boolean) {
  builder.addFieldInt8(1, +accepted, +false);
}

static endConnectionVerdict(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConnectionVerdict(builder:flatbuffers.Builder, clientId:number, accepted:boolean):flatbuffers.Offset {
  ConnectionVerdict.startConnectionVerdict(builder);
  ConnectionVerdict.addClientId(builder, clientId);
  ConnectionVerdict.addAccepted(builder, accepted);
  return ConnectionVerdict.endConnectionVerdict(builder);
}
}
