// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONNECTCLIENTVERDICT_SPANREEDMESSAGE_H_
#define FLATBUFFERS_GENERATED_CONNECTCLIENTVERDICT_SPANREEDMESSAGE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace SpanreedMessage {

struct ConnectClientVerdict;
struct ConnectClientVerdictBuilder;

struct ConnectClientVerdict FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConnectClientVerdictBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCEPTED = 4,
    VT_ERROR_REASON = 6,
    VT_APP_DATA = 8
  };
  bool accepted() const {
    return GetField<uint8_t>(VT_ACCEPTED, 0) != 0;
  }
  const ::flatbuffers::String *error_reason() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ERROR_REASON);
  }
  const ::flatbuffers::Vector<uint8_t> *app_data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_APP_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ACCEPTED, 1) &&
           VerifyOffset(verifier, VT_ERROR_REASON) &&
           verifier.VerifyString(error_reason()) &&
           VerifyOffset(verifier, VT_APP_DATA) &&
           verifier.VerifyVector(app_data()) &&
           verifier.EndTable();
  }
};

struct ConnectClientVerdictBuilder {
  typedef ConnectClientVerdict Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_accepted(bool accepted) {
    fbb_.AddElement<uint8_t>(ConnectClientVerdict::VT_ACCEPTED, static_cast<uint8_t>(accepted), 0);
  }
  void add_error_reason(::flatbuffers::Offset<::flatbuffers::String> error_reason) {
    fbb_.AddOffset(ConnectClientVerdict::VT_ERROR_REASON, error_reason);
  }
  void add_app_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> app_data) {
    fbb_.AddOffset(ConnectClientVerdict::VT_APP_DATA, app_data);
  }
  explicit ConnectClientVerdictBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ConnectClientVerdict> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConnectClientVerdict>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ConnectClientVerdict> CreateConnectClientVerdict(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool accepted = false,
    ::flatbuffers::Offset<::flatbuffers::String> error_reason = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> app_data = 0) {
  ConnectClientVerdictBuilder builder_(_fbb);
  builder_.add_app_data(app_data);
  builder_.add_error_reason(error_reason);
  builder_.add_accepted(accepted);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ConnectClientVerdict> CreateConnectClientVerdictDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool accepted = false,
    const char *error_reason = nullptr,
    const std::vector<uint8_t> *app_data = nullptr) {
  auto error_reason__ = error_reason ? _fbb.CreateString(error_reason) : 0;
  auto app_data__ = app_data ? _fbb.CreateVector<uint8_t>(*app_data) : 0;
  return SpanreedMessage::CreateConnectClientVerdict(
      _fbb,
      accepted,
      error_reason__,
      app_data__);
}

inline const SpanreedMessage::ConnectClientVerdict *GetConnectClientVerdict(const void *buf) {
  return ::flatbuffers::GetRoot<SpanreedMessage::ConnectClientVerdict>(buf);
}

inline const SpanreedMessage::ConnectClientVerdict *GetSizePrefixedConnectClientVerdict(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SpanreedMessage::ConnectClientVerdict>(buf);
}

inline bool VerifyConnectClientVerdictBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SpanreedMessage::ConnectClientVerdict>(nullptr);
}

inline bool VerifySizePrefixedConnectClientVerdictBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SpanreedMessage::ConnectClientVerdict>(nullptr);
}

inline void FinishConnectClientVerdictBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SpanreedMessage::ConnectClientVerdict> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedConnectClientVerdictBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SpanreedMessage::ConnectClientVerdict> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SpanreedMessage

#endif  // FLATBUFFERS_GENERATED_CONNECTCLIENTVERDICT_SPANREEDMESSAGE_H_
